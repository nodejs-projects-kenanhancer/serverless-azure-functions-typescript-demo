service: azure-functions-typescript

frameworkVersion: "2"

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: azure
  runtime: nodejs12
  region: ${env:region, 'UK West'}
  stage: ${opt:stage, 'dev'}
  prefix: ${opt:prefix, 'kenan'}  # prefix of generated resource name
  # os: windows  # windows is default, linux is available
  # subscriptionId: 00000000-0000-0000-0000-000000000000

  environment: # these will be created as application settings
    VARIABLE_FOO: "HELLO WORLD"
    FIRST_NAME: "KENAN"
    LAST_NAME: "HANCER"

  # you can define apim configuration here
  # apim:
  #   apis:
  #     - name: v1
  #       subscriptionRequired: false # if true must provide an api key
  #       displayName: v1
  #       description: V1 sample app APIs
  #       protocols:
  #         - https
  #       path: v1
  #       tags:
  #         - tag1
  #         - tag2
  #       authorization: none
  #   cors:
  #     allowCredentials: false
  #     allowedOrigins:
  #       - "*"
  #     allowedMethods:
  #       - GET
  #       - POST
  #       - PUT
  #       - DELETE
  #       - PATCH
  #     allowedHeaders:
  #       - "*"
  #     exposeHeaders:
  #       - "*"

plugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins
  - serverless-azure-functions
  - serverless-webpack
  - serverless-offline

functions:
  hello:
    handler: src/handlers/http/hello.sayHello
    events:
      - http: true
        x-azure-settings:
          methods: 
            - get
          route: hello #<string>, default - <function name>
          authLevel: anonymous #<enum - anonymous|function (default)|admin>

  goodbye:
    handler: src/handlers/http/goodbye.sayGoodbye
    events:
      - http: true
        x-azure-settings:
          methods:
            - get
          route: bye
          authLevel: anonymous

  timer1:
    handler: src/handlers/timer/timer1.printMessage
    events:
      - timer: true
        x-azure-settings:
          name: myTimer
          schedule: '*/10 * * * * *' #<string>, cron expression to run on

  timer2:
    handler: src/handlers/timer/timer2.handle
    events:
      - timer: true
        x-azure-settings:
          name: timerObj #<string>, default - "myTimer", specifies which name is available on `context.bindings`
          schedule: 0 */5 * * * * #<string>, cron expression to run on


  # The following are a few examples of other events you can configure:
  # storageBlob:
  #   handler: src/handlers/storageBlob.printMessage
  #   events:
  #     - blob:
  #       x-azure-settings:
  #         name: blob # Specifies which name is available on `context`
  #         path: blob-sample/{blobName}
  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String
  # storageQueue:
  #   handler: src/handlers/storageQueue.printMessage
  #   events:
  #     - queue: queue-sample
  #       x-azure-settings:
  #         name: message # Specifies which naem is available on `context`
  #         connection: AzureWebJobsStorage
  # timer:
  #   handler: src/handlers/timer.printMessage
  #   events:
  #     - timer:
  #       x-azure-settings:
  #         schedule: '*/10 * * * * *'
  # eventhub:
  #   handler: src/handlers/eventHub.printMessage
  #   events:
  #     - eventHub:
  #       x-azure-settings:
  #         name: eventHubMessages # Specifies which name it's available on `context`
  #         eventHubName: sample-hub # Specifies the Name of the Event Hub
  #         consumerGroup: $Default # Specifies the consumerGroup to listen with
  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String
  # serviceBusQueue:
  #   handler: src/handlers/serviceBusQueue.printMessage
  #   events:
  #     - serviceBus:
  #       x-azure-settings:
  #         name: message # Specifies which name is available on `context`
  #         queueName: sample-queue # Name of the service bus queue to consume
  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String
  # serviceBusTopic:
  #   handler: src/handlers/serviceBusTopic.printMessage
  #   events:
  #     - serviceBus:
  #       x-azure-settings:
  #         name: message # Specifies which name it's available on `context`
  #         topicName: sample-topic # Name of the service bus topic to consume
  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from
  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String
